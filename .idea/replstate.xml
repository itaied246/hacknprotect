<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1496775169597">{:repl-history {:ide [], :local [{:command &quot;(docs subs)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(+ 5 2)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(map inc [2 5 7])&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(+ 2 5)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(+ 5 \n   6\n   7)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(doc bit-xor\n     )&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(bit-xor \&quot;a\&quot; \&quot;b\&quot;\n         )&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(bit-xor 1 1\n         \n         )&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(bit-xor 0 1)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(bit-xor 2 1)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(bit-xor 3\n         1)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(int (first \&quot;Itai\n\&quot;))&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(add 5 (int (first \&quot;Itai\&quot;)))&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(+ 5 (int (first \&quot;Itai\&quot;)))&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(str (+ 5 (int (first \&quot;Itai\&quot;))))&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(comp str char (+ 5 (int (first \&quot;Itai\&quot;))))&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;((comp str char) (+ 5 (int (first \&quot;Itai\&quot;))))&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;((comp str char) (+ 5 (int (first \&quot;A\&quot;))))&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(add 5 \\A)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(add 5 \n     \\A)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(:require hackandprotect.core)&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(= 5)&quot;, :offset 4, :ns &quot;user&quot;} {:command &quot;(- 5)&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(+ 5 2\n   )&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(bit-xor (int \\a) (int \\b))&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(char (bit-xor (int \\a) (int \\b)))&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(bit-xor (int \\a) 1)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(char 96)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(bit-xor (int \\A) 1)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(char 64)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(char 96\n      )&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(str (\\b \\b \\b))&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(str '(\\b \\b \\b))&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(apply str '(\\b \\b \\b))&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(apply str (map #(char (+ 1 (int %))) \&quot;abc\&quot;))&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot; (map (partial + 1) [1 2 3]) &quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(nth \&quot;abc\&quot; 0)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(nth \&quot;abc\&quot; 1)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(assoc \&quot;abc\&quot; 1 \\c)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(assoc (seq \&quot;abc\&quot;) 1 \\c)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(assoc (vec \&quot;abc\&quot;) 1 \\c)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(str (assoc (vec \&quot;abc\&quot;) 1 \\c))&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(apply str (assoc (vec \&quot;abc\&quot;) 1 \\c))&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(dotimes [n 3] (assoc (vec \&quot;abc\&quot;) n \\k))&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(subs \&quot;aaaaa\&quot; 0 3)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(\&quot;abc\&quot; 0)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(:0 \&quot;abc\&quot;)&quot;, :offset 4, :ns &quot;user&quot;} {:command &quot;(0 \&quot;abc\&quot;)&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(nth 1 \&quot;abc\&quot;)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(get 1 \&quot;abc\&quot;)&quot;, :offset 4, :ns &quot;user&quot;} {:command &quot;(get \&quot;abc\&quot; 1)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(aset-char (vec \&quot;abc\&quot;) 1 \\k)&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;((fn [op start length] (map-indexed (fn [i m] (if (&lt;= start i length)\n                         (op m)\n                         m) \&quot;aaaaa\&quot;)))\n  #(char (+ n (int c)))\n  2\n  4)&quot;, :offset 172, :ns &quot;user&quot;} {:command &quot;((fn [op start length] (map-indexed (fn [i m] (if (&lt;= start i length)\n                         (op m)\n                         m) \&quot;aaaaa\&quot;)))\n  #(char (+ 1 (int %)))\n  2\n  4)&quot;, :offset 161, :ns &quot;user&quot;} {:command &quot;((fn [op start length] (map-indexed (fn [i m] (if (&lt;= start i length)\n                         (op m)\n                         m)) \&quot;aaaaa\&quot;))\n  #(char (+ 1 (int %)))\n  2\n  4)&quot;, :offset 131, :ns &quot;user&quot;} {:command &quot;((fn [op start length] (map-indexed (fn [i m] (if (&lt;= start i length)\n                         (op m)\n                         m)) \&quot;aaaaa\&quot;))\n  #(char (+ 1 (int %)))\n  1\n  4)&quot;, :offset 168, :ns &quot;user&quot;} {:command &quot;((fn [op start length] (map-indexed (fn [i m] (if (&lt;= start i length)\n                         (op m)\n                         m)) \&quot;aaaaa\&quot;))\n  #(char (+ 1 (int %)))\n  1\n  3)&quot;, :offset 172, :ns &quot;user&quot;} {:command &quot;(subs \&quot;aa\&quot; 3)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(doc subs)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(subs \&quot;aaaaa\&quot; 5)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(subs \&quot;aaaaa\&quot; 4)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(- length max-length)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(defn foo \n  [op stream]\n  (let [applied-op (partial op \&quot;O\&quot;)\n        applied-stream (applied-op stream)]\n    (if true\n      (str/reverse (foo op applied-stream)))))&quot;, :offset 164, :ns &quot;user&quot;} {:command &quot;(defn foo \n  [op stream]\n  (let [applied-op (partial op \&quot;O\&quot;)\n        applied-stream (applied-op stream)]\n    (if (&gt; (count stream) 10)\n      stream\n      (str/reverse (foo op applied-stream)))))&quot;, :offset 147, :ns &quot;user&quot;} {:command &quot;(foo str \&quot;abc\&quot;)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(encryption-step add 1 1 2 \&quot;aa\&quot;)&quot;, :offset 32, :ns &quot;user&quot;} &quot;(doc reduce)&quot;], :remote []}}</component>
</project>